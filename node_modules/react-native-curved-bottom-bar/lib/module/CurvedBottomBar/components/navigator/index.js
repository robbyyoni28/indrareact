function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-shadow */
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import React, { useEffect, useImperativeHandle, useState } from 'react';
import { Dimensions, Text, View, TouchableOpacity } from 'react-native';
import Svg, { Path } from 'react-native-svg';
import { useDeviceOrientation } from '../../../useDeviceOrientation';
import { getPath, getPathUp } from './path';
import { styles } from './styles';
const {
  width: maxW
} = Dimensions.get('window');
const Tab = createBottomTabNavigator();
const BottomBarComponent = /*#__PURE__*/React.forwardRef((props, ref) => {
  const SVG = Svg;
  const PATH = Path;
  const {
    type = 'DOWN',
    style,
    width = null,
    height = 65,
    circleWidth = 50,
    bgColor = 'gray',
    initialRouteName,
    tabBar,
    renderCircle,
    borderTopLeftRight = false,
    strokeWidth = 0
  } = props;
  const [itemLeft, setItemLeft] = useState([]);
  const [itemRight, setItemRight] = useState([]);
  const [maxWidth, setMaxWidth] = useState(width || maxW);
  const children = props === null || props === void 0 ? void 0 : props.children;
  const orientation = useDeviceOrientation();
  useImperativeHandle(ref, () => {
    return {};
  });
  useEffect(() => {
    const {
      width: w
    } = Dimensions.get('window');

    if (!width) {
      setMaxWidth(w);
    }
  }, [orientation, width]);

  const _renderButtonCenter = navigate => {
    var _children$filter$, _children$filter$$pro;

    const getTab = (_children$filter$ = children.filter(e => {
      var _e$props;

      return (e === null || e === void 0 ? void 0 : (_e$props = e.props) === null || _e$props === void 0 ? void 0 : _e$props.position) === 'CENTER';
    })[0]) === null || _children$filter$ === void 0 ? void 0 : (_children$filter$$pro = _children$filter$.props) === null || _children$filter$$pro === void 0 ? void 0 : _children$filter$$pro.name;
    return renderCircle({
      selectedTab: getTab,
      navigate: selectTab => {
        if (selectTab) {
          navigate(selectTab);
        }
      }
    });
  };

  useEffect(() => {
    const arrLeft = children.filter(item => {
      var _item$props;

      return (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.position) === 'LEFT';
    });
    const arrRight = children.filter(item => {
      var _item$props2;

      return (item === null || item === void 0 ? void 0 : (_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.position) === 'RIGHT';
    });
    setItemLeft(arrLeft);
    setItemRight(arrRight);
  }, [children, initialRouteName]);
  const d = type === 'DOWN' ? getPath(maxWidth, height, circleWidth >= 50 ? circleWidth : 50, borderTopLeftRight) : getPathUp(maxWidth, height + 30, circleWidth >= 50 ? circleWidth : 50, borderTopLeftRight);

  const renderItem = _ref => {
    let {
      color,
      routeName,
      navigate
    } = _ref;
    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      key: routeName,
      style: styles.itemTab,
      onPress: () => navigate(routeName)
    }, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: color
      }
    }, routeName));
  };

  const MyTabBar = props => {
    const {
      state,
      navigation
    } = props;
    const focusedTab = state === null || state === void 0 ? void 0 : state.routes[state.index].name;
    return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(View, {
      style: [styles.container, style]
    }, /*#__PURE__*/React.createElement(SVG, {
      width: maxWidth,
      height: height + (type === 'DOWN' ? 0 : 30)
    }, /*#__PURE__*/React.createElement(PATH, {
      fill: bgColor,
      stroke: "#DDDDDD",
      strokeWidth: strokeWidth,
      d
    })), /*#__PURE__*/React.createElement(View, {
      style: [styles.main, {
        width: maxWidth
      }, type === 'UP' && styles.top30]
    }, /*#__PURE__*/React.createElement(View, {
      style: [styles.rowLeft, {
        height: height
      }]
    }, itemLeft.map((item, index) => {
      var _item$props3;

      const routeName = item === null || item === void 0 ? void 0 : (_item$props3 = item.props) === null || _item$props3 === void 0 ? void 0 : _item$props3.name;

      if (tabBar === undefined) {
        return renderItem({
          routeName,
          color: focusedTab === routeName ? 'blue' : 'gray',
          navigate: navigation.navigate
        });
      }

      return /*#__PURE__*/React.createElement(View, {
        style: styles.flex1,
        key: index.toString()
      }, tabBar({
        routeName,
        selectedTab: focusedTab,
        navigate: selectTab => {
          if (selectTab !== focusedTab) {
            navigation.navigate({
              name: routeName,
              merge: true
            });
          }
        }
      }));
    })), _renderButtonCenter(navigation.navigate), /*#__PURE__*/React.createElement(View, {
      style: [styles.rowRight, {
        height: height
      }]
    }, itemRight.map((item, index) => {
      var _item$props4;

      const routeName = item === null || item === void 0 ? void 0 : (_item$props4 = item.props) === null || _item$props4 === void 0 ? void 0 : _item$props4.name;

      if (tabBar === undefined) {
        return renderItem({
          routeName,
          color: focusedTab === routeName ? 'blue' : 'gray',
          navigate: navigation.navigate
        });
      }

      return /*#__PURE__*/React.createElement(View, {
        style: styles.flex1,
        key: index.toString()
      }, tabBar({
        routeName,
        selectedTab: focusedTab,
        navigate: selectTab => {
          if (selectTab !== focusedTab) {
            navigation.navigate({
              name: routeName,
              merge: true
            });
          }
        }
      }));
    })))));
  };

  return /*#__PURE__*/React.createElement(Tab.Navigator, _extends({}, props, {
    tabBar: MyTabBar
  }), children === null || children === void 0 ? void 0 : children.map((e, index) => {
    return /*#__PURE__*/React.createElement(Tab.Screen, _extends({
      key: index.toString()
    }, e.props));
  }));
});
export default BottomBarComponent;
//# sourceMappingURL=index.js.map